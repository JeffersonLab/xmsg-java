apply plugin: 'java'
apply plugin: 'maven'

apply plugin: 'eclipse'
apply plugin: 'idea'

eclipse {
    classpath {
        defaultOutputDir = file("${buildDir}/eclipse-classes")
    }
}


sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
}


repositories {
    maven {
        url 'https://userweb.jlab.org/~smancill/repo/'
    }
    mavenCentral()
}


dependencies {
    compile 'org.zeromq:jeromq:0.3.5-SNAPSHOT'
    compile 'com.google.protobuf:protobuf-java:2.5.0'
    testCompile 'junit:junit:4.11'
}


task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}


task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}


artifacts {
    archives javadocJar
    archives sourcesJar
}


group = 'org.jlab.coda'
archivesBaseName = 'xmsg'
version = '1.0.2-SNAPSHOT'

defaultTasks 'build'


task(startFE, dependsOn: 'classes', type: JavaExec) {
    main = 'org.jlab.coda.xmsg.xsys.xMsgFE'
    classpath = sourceSets.main.runtimeClasspath
}

task(startNode, dependsOn: 'classes', type: JavaExec) {
    main = 'org.jlab.coda.xmsg.xsys.xMsgNode'
    classpath = sourceSets.main.runtimeClasspath
}


task(runPub, dependsOn: 'classes', type: JavaExec) {
    main = 'org.jlab.coda.xmsg.examples.Publisher'
    classpath = sourceSets.main.runtimeClasspath
}

task(runSub, dependsOn: 'classes', type: JavaExec) {
    main = 'org.jlab.coda.xmsg.examples.Subscriber'
    classpath = sourceSets.main.runtimeClasspath
}


task(runSyncPub, dependsOn: 'classes', type: JavaExec) {
    main = 'org.jlab.coda.xmsg.examples.RequestPublisher'
    classpath = sourceSets.main.runtimeClasspath
}

task(runSyncSub, dependsOn: 'classes', type: JavaExec) {
    main = 'org.jlab.coda.xmsg.examples.ReplySubscriber'
    classpath = sourceSets.main.runtimeClasspath
}
